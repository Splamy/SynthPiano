using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
//using Microsoft.DirectX.DirectSound;
using System.Threading;
using System.IO;
using System.Media;
//using NAudio;
using NAudio.Wave;

namespace SynthTest
{
	public partial class Form1 : Form
	{
		//Device applicationDevice = null;
		//SecondaryBuffer applicationBuffer = null;
		string strFileName = @"c:\ding.wav";
		List<BlackKey> BlackKeys = new List<BlackKey>();
		List<WhiteKey> WhiteKeys = new List<WhiteKey>();
		List<PianoKey> AllKeys = new List<PianoKey>();
		PianoKey CurrentKey = null;
		int lastGoodFrequency = 0;
		int panValue = 0;
		int volValue = 0;

		int[] basetable = new[] { 26200, 29400, 33000, 34900, 39200, 44000, 49525, 52400, 58800, 66000 };

		const int maxlen = 1000;
		Point[] grp = new Point[maxlen];
		public Form1()
		{
			InitializeComponent();

			SetStyle(ControlStyles.UserPaint, true);
			SetStyle(ControlStyles.AllPaintingInWmPaint, true);
			SetStyle(ControlStyles.DoubleBuffer, true);

			strFileName = System.IO.Path.Combine(Application.StartupPath, "a1.wav");

			CreateKeys();

			wout.Init(cuw);

			const int scale = 10;
			for (int i = 0; i < maxlen; i++)
			{
				grp[i] = new Point(i, 100 + 200 * BitConverter.ToInt16(cuw.result, i * (4 * scale)) / Int16.MaxValue);
			}

			/*try
			{
				//Initialize DirectSound
				applicationDevice = new Device();
				applicationDevice.SetCooperativeLevel(this, CooperativeLevel.Priority);
			}
			catch (SoundException)
			{
				MessageBox.Show("Could not initialize DirectSound. Sample will exit.", "Exiting...", MessageBoxButtons.OK, MessageBoxIcon.Error);
				Close();
				return;
			}*/
		}

		void CreateKeys()
		{
			int xpos;
			int ypos = 125;
			int[] freqtable;

			xpos = 20;
			//freqtable = new[] { 8000, 9000, 10000, 10700, 12000, 13400, 15200, 16300, 18000, 20000 }; // orig
			freqtable = new[] { 26200, 29400, 33000, 34900, 39200, 44000, 49525, 52400, 58800, 66000 };
			for (int i = 0; i < 10; i++)
			{
				WhiteKeys.Add(new WhiteKey(xpos, ypos, freqtable[i]));
				xpos += WhiteKey.kWidth;
			}

			xpos = 20 + WhiteKey.kWidth - BlackKey.kWidth / 2;
			freqtable = new[] { 8500, 9500, 10000, 11300, 12800, 14300, 15200, 17300, 19000, 20000 }; // orig
			//freqtable = new[] { 8500, 9500, 10000, 11300, 12800, 14300, 48000, 62000, 84000, 96000 };

			for (int i = 0; i < 10; i++)
			{
				if (i != 2 && i != 6 && i != 9)
					BlackKeys.Add(new BlackKey(xpos, ypos, freqtable[i]));
				xpos += WhiteKey.kWidth;
			}

			AllKeys.AddRange(WhiteKeys.ToArray());
			AllKeys.AddRange(BlackKeys.ToArray());
		}

		private void PianoForm_Paint(object sender, PaintEventArgs e)
		{
			Graphics g = e.Graphics;

			g.DrawLines(Pens.Black, grp);

			foreach (PianoKey k in AllKeys)
				k.Draw(g);
		}

		private void buttonExit_Click(object sender, EventArgs e)
		{
			Close();
		}

		private void tbarPan_Scroll(object sender, EventArgs e)
		{
			textPan.Text = ((TrackBar)sender).Value.ToString();
			panValue = ((TrackBar)sender).Value * 500;
		}

		private void tbarVolume_Scroll(object sender, EventArgs e)
		{
			textVolume.Text = ((TrackBar)sender).Value.ToString();
			volValue = ((TrackBar)sender).Value * 100;
		}

		private void PianoForm_MouseDown(object sender, MouseEventArgs e)
		{
			if (FindFrequency(new Point(e.X, e.Y), out CurrentKey))
			{
				CurrentKey.Selected = true;
				Invalidate(CurrentKey.Bounds);
				PlayNote(CurrentKey.Frequency);
			}
		}

		private void PianoForm_MouseUp(object sender, MouseEventArgs e)
		{
			if (CurrentKey != null)
			{
				CurrentKey.Selected = false;
				Invalidate(CurrentKey.Bounds);
				CurrentKey = null;
			}
		}

		CustomWaver cuw = new CustomWaver();
		WaveOut wout = new WaveOut();

		private void PlayNote(int freq)
		{
			wout.Play();

			return;

			int pos = -1;
			for (int i = 0; i < basetable.Length - 4; i++)
				if (basetable[i] == freq)
				{
					pos = i;
					BeepBeep(300, new int[] { freq / 100, basetable[i + 2] / 100 }, 1000, true);
				}
			if (pos == -1)
				BeepBeep(300, new int[] { freq / 100 }, 1000, true);
			return;

			/*Thread t = new Thread(PlayThread);
			t.Start(freq);
			return;

			if (applicationBuffer != null)
			{
				applicationBuffer.Dispose();
				applicationBuffer = null;
			}

			BufferDescription desc = new BufferDescription();
			desc.ControlFrequency = true;
			desc.ControlPan = true;
			desc.ControlVolume = true;

			applicationBuffer = new SecondaryBuffer(strFileName, desc, applicationDevice);
			applicationBuffer.Frequency = freq;
			applicationBuffer.Play(0, BufferPlayFlags.Default);*/
		}

		private void StopPlaing()
		{
			wout.Stop();
			/*if (applicationBuffer != null)
			{
				applicationBuffer.Stop();
				applicationBuffer.SetCurrentPosition(0);
			}*/
		}

		private bool FindFrequency(Point p, out PianoKey matchKey)
		{
			foreach (PianoKey k in AllKeys)
			{
				if (k.IsContained(p))
				{
					matchKey = k;
					return true;
				}
			}
			matchKey = null;
			return false;
		}

		private void PlayThread(object freq)
		{
			/*BufferDescription desc = new BufferDescription();
			desc.ControlFrequency = true;
			desc.ControlPan = true;
			desc.ControlVolume = true;

			SecondaryBuffer threadBuffer = new SecondaryBuffer(strFileName, desc, applicationDevice);
			threadBuffer.Frequency = (int)freq;
			threadBuffer.Volume = volValue;
			threadBuffer.Pan = panValue;
			threadBuffer.Play(0, BufferPlayFlags.Default);

			while (threadBuffer.Status.Playing)
				Thread.Sleep(1);

			threadBuffer.Dispose();*/
		}

		/*private void tbarFreq_Scroll(object sender, System.EventArgs e)
		{
			int newFrequency = 0;
			if (null != applicationBuffer)
			{
				try
				{
					newFrequency = ((TrackBar)sender).Value;
					// Attempt to set the frequency to the new value
					applicationBuffer.Frequency = newFrequency;
					lastGoodFrequency = newFrequency;
				}
				catch
				{
					// Let's try to guess why it failed..
					if ((applicationBuffer.Caps.LocateInHardware) && (newFrequency > applicationDevice.Caps.MaxSecondarySampleRate))
					{
					}
					else if (100000 < newFrequency)
					{
						// Some platforms (pre-WinXP SP1) don't support 
						// >100k Hz so they will fail when setting it higher
					}
					else
					{
					}
					// Reset to the last valid frequency
					applicationBuffer.Frequency = lastGoodFrequency;
					((TrackBar)sender).Value = lastGoodFrequency;
				}
			}
		}*/

		public static byte[] BeepBeep(int Amplitude, int[] Frequencys, int Duration, bool header)
		{
			double A = ((Amplitude * (Math.Pow(2, 15))) / 1000) - 1;
			double[] DeltaFTTable = new double[Frequencys.Length];
			for (int i = 0; i < Frequencys.Length; i++)
				DeltaFTTable[i] = 2 * Math.PI * Frequencys[i] / 44100.0;
			//double DeltaFT = 2 * Math.PI * Frequency / 44100.0;

			int Samples = 441 * Duration / 10;
			int Bytes = Samples * 4;
			int[] Hdr = { 0X46464952, 36 + Bytes, 0X45564157, 0X20746D66, 16, 0X20001, 44100, 176400, 0X100004, 0X61746164, Bytes };
			using (MemoryStream MS = new MemoryStream(44 + Bytes))
			{
				using (BinaryWriter BW = new BinaryWriter(MS))
				{
					if (header)
						for (int I = 0; I < Hdr.Length; I++)
						{
							BW.Write(Hdr[I]);
						}
					for (int T = 0; T < Samples; T++)
					{
						//short Sample = System.Convert.ToInt16(A * (Math.Sin(DeltaFT * T)));
						double wave = 0;
						foreach (double x in DeltaFTTable)
							wave += Math.Sin(x * T) / Frequencys.Length;
						short Sample = Convert.ToInt16(Math.Min(ushort.MaxValue / 2 - 1, A * wave));
						BW.Write(Sample);
						BW.Write(Sample);
					}
					BW.Flush();
					//MS.Seek(0, SeekOrigin.Begin);
					return MS.ToArray();
					using (SoundPlayer SP = new SoundPlayer(MS))
					{
						SP.PlaySync();
					}
				}
			}
		}
	}

	public class CustomWaver : IWaveProvider
	{
		WaveFormat wafo = new WaveFormat(44100, 1);
		public WaveFormat WaveFormat { get { return wafo; } }
		int pos = 0;
		public byte[] result = BeepBeep(300, new int[] { 440 }, 1000, false);
		public byte[] result2 = BeepBeep(300, new int[] { 524, 660 }, 1000, false);
		bool bit2 = false;

		public int Read(byte[] buffer, int offset, int count)
		{
			if (pos + count < result.Length)
			{
				Array.Copy(bit2 ? result2 : result, pos, buffer, 0, count);
				pos += count;
			}
			else
			{
				int remain = result.Length - pos;
				Array.Copy(result, pos, buffer, 0, remain);
				Array.Copy(result2, 0, buffer, 0, count - remain);
				bit2 = true;
				pos = count - remain;
			}
			return count;
		}

		public static byte[] BeepBeep(int Amplitude, int[] Frequencys, int Duration, bool header)
		{
			double A = ((Amplitude * (System.Math.Pow(2, 15))) / 1000) - 1;
			double[] DeltaFTTable = new double[Frequencys.Length];
			for (int i = 0; i < Frequencys.Length; i++)
				DeltaFTTable[i] = 2 * Math.PI * Frequencys[i] / 44100.0;
			//double DeltaFT = 2 * Math.PI * Frequency / 44100.0;

			int Samples = 441 * Duration / 10;
			int Bytes = Samples * 4;
			int[] Hdr = { 0X46464952, 36 + Bytes, 0X45564157, 0X20746D66, 16, 0X20001, 44100, 176400, 0X100004, 0X61746164, Bytes };
			using (MemoryStream MS = new MemoryStream(44 + Bytes))
			{
				using (BinaryWriter BW = new BinaryWriter(MS))
				{
					if (header)
						for (int I = 0; I < Hdr.Length; I++)
						{
							BW.Write(Hdr[I]);
						}
					for (int T = 0; T < Samples; T++)
					{
						//short Sample = System.Convert.ToInt16(A * (Math.Sin(DeltaFT * T)));
						double wave = 0;
						foreach (double x in DeltaFTTable)
							wave += Math.Sin(x * T) / Frequencys.Length;
						short Sample = System.Convert.ToInt16(Math.Min(ushort.MaxValue / 2 - 1, A * wave));
						BW.Write(Sample);
						BW.Write(Sample);
					}
					BW.Flush();
					//MS.Seek(0, SeekOrigin.Begin);
					return MS.ToArray();
					using (SoundPlayer SP = new SoundPlayer(MS))
					{
						SP.PlaySync();
					}
				}
			}
		}
	}
}
